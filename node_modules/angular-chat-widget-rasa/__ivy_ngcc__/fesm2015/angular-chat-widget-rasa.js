import { CommonModule } from '@angular/common';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { Subject } from 'rxjs';
import { animate, style, transition, trigger } from '@angular/animations';
import io from 'socket.io-client';
import { Observable } from 'rxjs/Observable';
import { Component, Input, Injectable, EventEmitter, Output, ViewChild, ViewEncapsulation, HostListener, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["bottom"];
function ChatWidgetComponent_div_1_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 17);
    ɵngcc0.ɵɵelementStart(2, "div");
    ɵngcc0.ɵɵelement(3, "chat-avatar", 18);
    ɵngcc0.ɵɵelementStart(4, "div", 19);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 20);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "date");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const message_r5 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("chat-message-received", message_r5.type === "received")("chat-message-sent", message_r5.type === "sent");
    ɵngcc0.ɵɵproperty("@fadeIn", undefined);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("image", message_r5.from.avatar);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", message_r5.text, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(8, 8, message_r5.date, "short"), " ");
} }
function ChatWidgetComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵelementStart(2, "div", 5);
    ɵngcc0.ɵɵelementStart(3, "div", 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementStart(5, "span", 7);
    ɵngcc0.ɵɵtext(6, "\u25CF");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "button", 8);
    ɵngcc0.ɵɵlistener("click", function ChatWidgetComponent_div_1_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.toggleChat(); });
    ɵngcc0.ɵɵtext(8, "\u2715");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(9, "chat-avatar", 9);
    ɵngcc0.ɵɵelementStart(10, "h3", 10);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "div", 11);
    ɵngcc0.ɵɵelement(13, "div", 12, 13);
    ɵngcc0.ɵɵtemplate(15, ChatWidgetComponent_div_1_ng_container_15_Template, 9, 11, "ng-container", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "div", 15);
    ɵngcc0.ɵɵelementStart(17, "chat-input", 16);
    ɵngcc0.ɵɵlistener("send", function ChatWidgetComponent_div_1_Template_chat_input_send_17_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.sendMessage($event); })("dismiss", function ChatWidgetComponent_div_1_Template_chat_input_dismiss_17_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.toggleChat(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@fadeInOut", ctx_r0.visible);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.operator.status, " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("image", ctx_r0.operator.avatar);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.operator.name, " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.messages);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("focus", ctx_r0.focus);
} }
function ChatWidgetComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "\u2715");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("@fadeIn", undefined);
} }
function ChatWidgetComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "?");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("@fadeIn", undefined);
} }
const _c1 = ["message"];
function ChatConfigComponent_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 2);
    ɵngcc0.ɵɵlistener("click", function ChatConfigComponent_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const item_r1 = ctx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.setTheme(item_r1); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("btn-active", item_r1 === ctx_r0.theme);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r1, " ");
} }
class ChatAvatarComponent {
}
ChatAvatarComponent.ɵfac = function ChatAvatarComponent_Factory(t) { return new (t || ChatAvatarComponent)(); };
ChatAvatarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChatAvatarComponent, selectors: [["chat-avatar"]], inputs: { image: "image" }, decls: 1, vars: 1, consts: [[1, "avatar"]], template: function ChatAvatarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "img", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("src", ctx.image, ɵngcc0.ɵɵsanitizeUrl);
    } }, styles: [".avatar[_ngcontent-%COMP%] {\n      height: 30px;\n      width: 30px;\n      border-radius: 50%;\n      float: left;\n      margin-right: 10px;\n    }"] });
ChatAvatarComponent.propDecorators = {
    image: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChatAvatarComponent, [{
        type: Component,
        args: [{
                selector: 'chat-avatar',
                template: `
    <img [attr.src]="image" class="avatar" />
  `,
                styles: [`
    .avatar {
      height: 30px;
      width: 30px;
      border-radius: 50%;
      float: left;
      margin-right: 10px;
    }
  `]
            }]
    }], null, { image: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const fadeInOut = trigger('fadeInOut', [
    transition(':enter', [
        style({ opacity: 0 }),
        animate(250)
    ]),
    transition('* => void', [
        animate(250, style({
            opacity: 0,
        }))
    ])
]);
/** @type {?} */
const fadeIn = trigger('fadeIn', [
    transition(':enter', [
        style({ opacity: 0 }),
        animate(500)
    ]),
    transition(':leave', [
        style({ opacity: 0 }),
        animate(1)
    ]),
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChatService {
    constructor() {
        this.getMessages = (/**
         * @return {?}
         */
        () => {
            return Observable.create((/**
             * @param {?} observer
             * @return {?}
             */
            (observer) => {
                this.socket.on('bot_uttered', (/**
                 * @param {?} message
                 * @return {?}
                 */
                (message) => {
                    observer.next(message);
                }));
            }));
        });
    }
    /**
     * @param {?} url
     * @return {?}
     */
    connect(url) {
        this.socket = io(url);
        this.socket.on('connect', (/**
         * @return {?}
         */
        () => {
            this.socket.emit('session_request', { 'session_id': this.socket.id });
        }));
        this.socket.on('session_confirm', (/**
         * @param {?} remote_id
         * @return {?}
         */
        (remote_id) => {
        }));
        this.socket.on('connect_error', (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            console.log(error);
        }));
        this.socket.on('error', (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            console.log(error);
        }));
        this.socket.on('disconnect', (/**
         * @param {?} reason
         * @return {?}
         */
        (reason) => {
            console.log(reason);
        }));
    }
    /**
     * @param {?} message
     * @return {?}
     */
    sendMessage(message) {
        this.socket.emit('user_uttered', { 'message': message });
    }
}
ChatService.ɵfac = function ChatService_Factory(t) { return new (t || ChatService)(); };
ChatService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ChatService, factory: ChatService.ɵfac, providedIn: 'root' });
/** @nocollapse */
ChatService.ctorParameters = () => [];
/** @nocollapse */ ChatService.ngInjectableDef = defineInjectable({ factory: function ChatService_Factory() { return new ChatService(); }, token: ChatService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChatService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChatWidgetComponent {
    /**
     * @param {?} chatService
     */
    constructor(chatService) {
        this.theme = 'blue';
        this.botName = 'Bot';
        this.botAvatar = `https://cdn.dribbble.com/users/275794/screenshots/3128598/gbot_800.png`;
        this.userAvatar = `https://storage.proboards.com/6172192/images/gKhXFw_5W0SD4nwuMev1.png`;
        this.url = 'http://localhost:5002';
        this.startingMessage = 'Hi, how can we help you?';
        this.opened = true;
        this._visible = false;
        this.focus = new Subject();
        this.messages = [];
        this.chatService = chatService;
        this.chatService.connect(this.url);
    }
    /**
     * @return {?}
     */
    get visible() {
        return this._visible;
    }
    /**
     * @param {?} visible
     * @return {?}
     */
    set visible(visible) {
        this._visible = visible;
        if (this._visible) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.scrollToBottom();
                this.focusMessage();
            }), 0);
        }
    }
    /**
     * @param {?} from
     * @param {?} text
     * @param {?} type
     * @return {?}
     */
    addMessage(from, text, type) {
        this.messages.unshift({
            from,
            text,
            type,
            date: new Date().getTime(),
        });
        this.scrollToBottom();
    }
    /**
     * @return {?}
     */
    scrollToBottom() {
        if (this.bottom !== undefined) {
            this.bottom.nativeElement.scrollIntoView();
        }
    }
    /**
     * @return {?}
     */
    focusMessage() {
        this.focus.next(true);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.client = {
            name: 'Guest User',
            status: 'online',
            avatar: this.userAvatar,
        };
        this.operator = {
            name: this.botName,
            status: 'online',
            avatar: this.botAvatar,
        };
        if (this.opened) {
            setTimeout((/**
             * @return {?}
             */
            () => this.visible = true), 1000);
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.addMessage(this.operator, this.startingMessage, 'received');
        }), 1500);
        this.chatService
            .getMessages()
            .subscribe((/**
         * @param {?} message
         * @return {?}
         */
        (message) => {
            setTimeout((/**
             * @return {?}
             */
            () => { this.addMessage(this.operator, message.text, 'received'); }), 1000);
        }));
    }
    /**
     * @return {?}
     */
    toggleChat() {
        this.visible = !this.visible;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    sendMessage({ message }) {
        if (message.trim() === '') {
            return;
        }
        this.addMessage(this.client, message, 'sent');
        this.chatService.sendMessage(message);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyboardEvent(event) {
        if (event.key === '/') {
            this.focusMessage();
        }
        if (event.key === '?' && !this._visible) {
            this.toggleChat();
        }
    }
}
ChatWidgetComponent.ɵfac = function ChatWidgetComponent_Factory(t) { return new (t || ChatWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ChatService)); };
ChatWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChatWidgetComponent, selectors: [["chat-widget"]], viewQuery: function ChatWidgetComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.bottom = _t.first);
    } }, hostBindings: function ChatWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keypress", function ChatWidgetComponent_keypress_HostBindingHandler($event) { return ctx.handleKeyboardEvent($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { theme: "theme", botName: "botName", botAvatar: "botAvatar", userAvatar: "userAvatar", url: "url", startingMessage: "startingMessage", opened: "opened", visible: "visible" }, decls: 5, vars: 6, consts: [["class", "chat-box", 4, "ngIf"], [1, "chat-button", 3, "click"], [4, "ngIf"], [1, "chat-box"], [1, "chat-box-header"], [1, ""], [1, "operator-status"], [1, "operator-status-online"], [1, "chat-button-header", 3, "click"], [3, "image"], [1, "operator-name"], [1, "chat-box-main"], [1, "chat-message-bottom"], ["bottom", ""], [4, "ngFor", "ngForOf"], [1, "chat-box-footer"], [3, "focus", "send", "dismiss"], [1, "chat-message"], [1, "chat-message-from-avatar", 3, "image"], [1, "chat-message-text"], [1, "chat-message-date"]], template: function ChatWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, ChatWidgetComponent_div_1_Template, 18, 6, "div", 0);
        ɵngcc0.ɵɵelementStart(2, "button", 1);
        ɵngcc0.ɵɵlistener("click", function ChatWidgetComponent_Template_button_click_2_listener() { return ctx.toggleChat(); });
        ɵngcc0.ɵɵtemplate(3, ChatWidgetComponent_span_3_Template, 2, 1, "span", 2);
        ɵngcc0.ɵɵtemplate(4, ChatWidgetComponent_span_4_Template, 2, 1, "span", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("wrapper ", ctx.theme, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.visible);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.visible);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.visible);
    } }, directives: function () { return [ɵngcc1.NgIf, ChatAvatarComponent, ɵngcc1.NgForOf, ChatInputComponent]; }, pipes: function () { return [ɵngcc1.DatePipe]; }, styles: ["*[_ngcontent-%COMP%]{box-sizing:border-box;position:relative;font-family:\"Open Sans\",\"Helvetica Neue\",sans-serif}.wrapper[_ngcontent-%COMP%]{position:absolute;top:0;bottom:0;height:100vh;width:100vw}.chat-button[_ngcontent-%COMP%]{z-index:1;width:60px;height:60px;position:absolute;bottom:20px;right:40px;box-shadow:0 5px 40px rgba(0,0,0,.16);background:#1976d2;border-radius:50%;border:none;outline:0;color:#fff;font-size:32px}.chat-button-header[_ngcontent-%COMP%]{z-index:1;font-weight:700;color:#fff;border:1px solid #fff;background-color:inherit;padding:5px 9px;margin-left:5px}.chat-button[_ngcontent-%COMP%]:focus{border:2px solid #fff}.chat-box[_ngcontent-%COMP%]{z-index:2;position:absolute;left:0;height:100vh;width:100vw;margin:0;display:flex;flex-direction:column;box-shadow:0 5px 40px rgba(0,0,0,.16);background:#1976d2}.chat-box-hidden[_ngcontent-%COMP%]{display:none}.chat-box-header[_ngcontent-%COMP%]{padding:10px;color:#fff}.chat-box-main[_ngcontent-%COMP%]{flex:1;width:100%;background:#f5f5f5;display:flex;flex-direction:column-reverse;overflow:auto}.chat-box-footer[_ngcontent-%COMP%]{color:#fff;height:50px}.operator-name[_ngcontent-%COMP%]{margin:0;padding:1px}.operator-status[_ngcontent-%COMP%]{float:right;padding:4px}.operator-status[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{margin-left:4px}.operator-status-online[_ngcontent-%COMP%]{color:#7cfc00}.operator-status-offline[_ngcontent-%COMP%]{color:red}.operator-avatar[_ngcontent-%COMP%]{height:30px;width:30px;border-radius:50%;float:left;margin-right:10px}.chat-message[_ngcontent-%COMP%]{display:block;width:auto;margin:5px;align-self:flex-start;flex-direction:row;max-width:80%;word-wrap:break-word}.chat-message-date[_ngcontent-%COMP%]{font-size:11px;color:#8d898d;padding:5px}.chat-message-from-avatar[_ngcontent-%COMP%]{height:35px;width:35px;border-radius:50%}.chat-message-text[_ngcontent-%COMP%]{margin-left:10px;padding:10px;border-radius:3px}.chat-message-received[_ngcontent-%COMP%]{margin-right:50px}.chat-message-received[_ngcontent-%COMP%]   .chat-message-text[_ngcontent-%COMP%]{background:#b9d6f2;margin-left:50px;border-bottom-left-radius:0}.chat-message-received[_ngcontent-%COMP%]   .chat-message-text[_ngcontent-%COMP%]:before{position:absolute;content:\" \";left:-10px;bottom:0;border-right:10px solid #b9d6f2;border-top:10px solid transparent;z-index:0}.chat-message-received[_ngcontent-%COMP%]   .chat-message-date[_ngcontent-%COMP%]{margin-left:50px}.chat-message-received[_ngcontent-%COMP%]   .chat-message-from-avatar[_ngcontent-%COMP%]{position:absolute;left:0;bottom:-15px}.chat-message-sent[_ngcontent-%COMP%]{align-self:flex-end}.chat-message-sent[_ngcontent-%COMP%]   .chat-message-from[_ngcontent-%COMP%]{float:right}.chat-message-sent[_ngcontent-%COMP%]   .chat-message-text[_ngcontent-%COMP%]{background:#84dccf;margin-right:50px;border-bottom-right-radius:0}.chat-message-sent[_ngcontent-%COMP%]   .chat-message-text[_ngcontent-%COMP%]:after{position:absolute;content:\" \";right:-10px;bottom:0;border-left:10px solid #84dccf;border-top:10px solid transparent;z-index:0}.chat-message-sent[_ngcontent-%COMP%]   .chat-message-date[_ngcontent-%COMP%]{text-align:right;padding-right:50px}.chat-message-sent[_ngcontent-%COMP%]   .chat-message-from-avatar[_ngcontent-%COMP%]{position:absolute;right:0;bottom:-15px}.blue[_ngcontent-%COMP%]   .chat-box[_ngcontent-%COMP%], .blue[_ngcontent-%COMP%]   .chat-button[_ngcontent-%COMP%]{background:#1976d2}.grey[_ngcontent-%COMP%]   .chat-box[_ngcontent-%COMP%], .grey[_ngcontent-%COMP%]   .chat-button[_ngcontent-%COMP%]{background:#454549}.red[_ngcontent-%COMP%]   .chat-box[_ngcontent-%COMP%], .red[_ngcontent-%COMP%]   .chat-button[_ngcontent-%COMP%]{background:#dd0031}@media (min-width:576px){.wrapper[_ngcontent-%COMP%]{top:auto;right:0;width:300px}.chat-button[_ngcontent-%COMP%]{display:block}.chat-button-header[_ngcontent-%COMP%]{display:none}.chat-box[_ngcontent-%COMP%]{top:auto;left:auto;bottom:100px;right:40px;height:60vh;width:300px;border-radius:10px}}@media (min-width:768px){.chat-box[_ngcontent-%COMP%]{height:70vh}}@media (min-width:992px){.chat-box[_ngcontent-%COMP%]{height:80vh}}"], data: { animation: [fadeInOut, fadeIn] } });
/** @nocollapse */
ChatWidgetComponent.ctorParameters = () => [
    { type: ChatService }
];
ChatWidgetComponent.propDecorators = {
    bottom: [{ type: ViewChild, args: ['bottom',] }],
    theme: [{ type: Input }],
    botName: [{ type: Input }],
    botAvatar: [{ type: Input }],
    userAvatar: [{ type: Input }],
    url: [{ type: Input }],
    startingMessage: [{ type: Input }],
    opened: [{ type: Input }],
    visible: [{ type: Input }],
    handleKeyboardEvent: [{ type: HostListener, args: ['document:keypress', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChatWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'chat-widget',
                template: "<div class=\"wrapper {{theme}}\">\n  <div class=\"chat-box\" *ngIf=\"visible\" [@fadeInOut]=\"visible\">\n    <div class=\"chat-box-header\">\n      <div class=\"\">\n        <div class=\"operator-status\">\n          {{operator.status}}\n          <span class=\"operator-status-online\">\u25CF</span>\n          <button class=\"chat-button-header\" (click)=\"toggleChat()\">\u2715</button>\n        </div>\n        <chat-avatar [image]=\"operator.avatar\"></chat-avatar>\n        <h3 class=\"operator-name\">\n          {{operator.name}}\n        </h3>\n      </div>\n    </div>\n    <div class=\"chat-box-main\">\n      <div class=\"chat-message-bottom\" #bottom></div>\n      <ng-container *ngFor=\"let message of messages\">\n        <div class=\"chat-message\" [class.chat-message-received]=\"message.type === 'received'\"\n             [@fadeIn]\n             [class.chat-message-sent]=\"message.type === 'sent'\">\n          <div >\n            <chat-avatar [image]=\"message.from.avatar\" class=\"chat-message-from-avatar\"></chat-avatar>\n            <div class=\"chat-message-text\">\n              {{message.text}}\n            </div>\n          </div>\n          <div class=\"chat-message-date\">\n            {{message.date | date: 'short'}}\n          </div>\n        </div>\n      </ng-container>\n    </div>\n    <div class=\"chat-box-footer\">\n      <chat-input (send)=\"sendMessage($event)\" (dismiss)=\"toggleChat()\" [focus]=\"focus\"></chat-input>\n    </div>\n  </div>\n  <button class=\"chat-button\" (click)=\"toggleChat()\">\n    <span [@fadeIn] *ngIf=\"visible\">\u2715</span>\n    <span [@fadeIn] *ngIf=\"!visible\">?</span>\n  </button>\n</div>\n",
                animations: [fadeInOut, fadeIn],
                styles: ["*{box-sizing:border-box;position:relative;font-family:\"Open Sans\",\"Helvetica Neue\",sans-serif}.wrapper{position:absolute;top:0;bottom:0;height:100vh;width:100vw}.chat-button{z-index:1;width:60px;height:60px;position:absolute;bottom:20px;right:40px;box-shadow:0 5px 40px rgba(0,0,0,.16);background:#1976d2;border-radius:50%;border:none;outline:0;color:#fff;font-size:32px}.chat-button-header{z-index:1;font-weight:700;color:#fff;border:1px solid #fff;background-color:inherit;padding:5px 9px;margin-left:5px}.chat-button:focus{border:2px solid #fff}.chat-box{z-index:2;position:absolute;left:0;height:100vh;width:100vw;margin:0;display:flex;flex-direction:column;box-shadow:0 5px 40px rgba(0,0,0,.16);background:#1976d2}.chat-box-hidden{display:none}.chat-box-header{padding:10px;color:#fff}.chat-box-main{flex:1;width:100%;background:#f5f5f5;display:flex;flex-direction:column-reverse;overflow:auto}.chat-box-footer{color:#fff;height:50px}.operator-name{margin:0;padding:1px}.operator-status{float:right;padding:4px}.operator-status span{margin-left:4px}.operator-status-online{color:#7cfc00}.operator-status-offline{color:red}.operator-avatar{height:30px;width:30px;border-radius:50%;float:left;margin-right:10px}.chat-message{display:block;width:auto;margin:5px;align-self:flex-start;flex-direction:row;max-width:80%;word-wrap:break-word}.chat-message-date{font-size:11px;color:#8d898d;padding:5px}.chat-message-from-avatar{height:35px;width:35px;border-radius:50%}.chat-message-text{margin-left:10px;padding:10px;border-radius:3px}.chat-message-received{margin-right:50px}.chat-message-received .chat-message-text{background:#b9d6f2;margin-left:50px;border-bottom-left-radius:0}.chat-message-received .chat-message-text:before{position:absolute;content:\" \";left:-10px;bottom:0;border-right:10px solid #b9d6f2;border-top:10px solid transparent;z-index:0}.chat-message-received .chat-message-date{margin-left:50px}.chat-message-received .chat-message-from-avatar{position:absolute;left:0;bottom:-15px}.chat-message-sent{align-self:flex-end}.chat-message-sent .chat-message-from{float:right}.chat-message-sent .chat-message-text{background:#84dccf;margin-right:50px;border-bottom-right-radius:0}.chat-message-sent .chat-message-text:after{position:absolute;content:\" \";right:-10px;bottom:0;border-left:10px solid #84dccf;border-top:10px solid transparent;z-index:0}.chat-message-sent .chat-message-date{text-align:right;padding-right:50px}.chat-message-sent .chat-message-from-avatar{position:absolute;right:0;bottom:-15px}.blue .chat-box,.blue .chat-button{background:#1976d2}.grey .chat-box,.grey .chat-button{background:#454549}.red .chat-box,.red .chat-button{background:#dd0031}@media (min-width:576px){.wrapper{top:auto;right:0;width:300px}.chat-button{display:block}.chat-button-header{display:none}.chat-box{top:auto;left:auto;bottom:100px;right:40px;height:60vh;width:300px;border-radius:10px}}@media (min-width:768px){.chat-box{height:70vh}}@media (min-width:992px){.chat-box{height:80vh}}"]
            }]
    }], function () { return [{ type: ChatService }]; }, { theme: [{
            type: Input
        }], botName: [{
            type: Input
        }], botAvatar: [{
            type: Input
        }], userAvatar: [{
            type: Input
        }], url: [{
            type: Input
        }], startingMessage: [{
            type: Input
        }], opened: [{
            type: Input
        }], visible: [{
            type: Input
        }], 
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyboardEvent: [{
            type: HostListener,
            args: ['document:keypress', ['$event']]
        }], bottom: [{
            type: ViewChild,
            args: ['bottom']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChatInputComponent {
    constructor() {
        this.buttonText = '↩︎';
        this.focus = new EventEmitter();
        this.send = new EventEmitter();
        this.dismiss = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.focus.subscribe((/**
         * @return {?}
         */
        () => this.focusMessage()));
    }
    /**
     * @return {?}
     */
    focusMessage() {
        this.message.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    getMessage() {
        return this.message.nativeElement.value;
    }
    /**
     * @return {?}
     */
    clearMessage() {
        this.message.nativeElement.value = '';
    }
    /**
     * @return {?}
     */
    onSubmit() {
        /** @type {?} */
        const message = this.getMessage();
        if (message.trim() === '') {
            return;
        }
        this.send.emit({ message });
        this.clearMessage();
        this.focusMessage();
    }
}
ChatInputComponent.ɵfac = function ChatInputComponent_Factory(t) { return new (t || ChatInputComponent)(); };
ChatInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChatInputComponent, selectors: [["chat-input"]], viewQuery: function ChatInputComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.message = _t.first);
    } }, inputs: { buttonText: "buttonText", focus: "focus" }, outputs: { send: "send", dismiss: "dismiss" }, decls: 4, vars: 1, consts: [["type", "text", "placeholder", "Type message...", 1, "chat-input-text", 3, "keydown.enter", "keyup.enter", "keyup.escape"], ["message", ""], ["type", "submit", 1, "chat-input-submit", 3, "click"]], template: function ChatInputComponent_Template(rf, ctx) { if (rf & 1) {
        const _r1 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "textarea", 0, 1);
        ɵngcc0.ɵɵlistener("keydown.enter", function ChatInputComponent_Template_textarea_keydown_enter_0_listener() { return ctx.onSubmit(); })("keyup.enter", function ChatInputComponent_Template_textarea_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r1); const _r0 = ɵngcc0.ɵɵreference(1); return _r0.value = ""; })("keyup.escape", function ChatInputComponent_Template_textarea_keyup_escape_0_listener() { return ctx.dismiss.emit(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "button", 2);
        ɵngcc0.ɵɵlistener("click", function ChatInputComponent_Template_button_click_2_listener() { return ctx.onSubmit(); });
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.buttonText, " ");
    } }, styles: [".chat-input-text{margin:14px 0 0 14px;height:25px;width:70%;border:0;resize:none;border:none;overflow:auto;outline:0;box-shadow:none;font-size:14px;background-color:inherit;color:inherit}.chat-input-text::-webkit-input-placeholder{color:inherit}.chat-input-text::-moz-placeholder{color:inherit}.chat-input-text::-ms-input-placeholder{color:inherit}.chat-input-submit{margin:14px 12px;float:right;background-color:inherit;color:inherit;font-size:24px;border:0;outline:0}"], encapsulation: 2 });
ChatInputComponent.propDecorators = {
    buttonText: [{ type: Input }],
    focus: [{ type: Input }],
    send: [{ type: Output }],
    dismiss: [{ type: Output }],
    message: [{ type: ViewChild, args: ['message',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChatInputComponent, [{
        type: Component,
        args: [{
                selector: 'chat-input',
                template: `
    <textarea type="text" class="chat-input-text" placeholder="Type message..."
              #message (keydown.enter)="onSubmit()" (keyup.enter)="message.value = ''" (keyup.escape)="dismiss.emit()"></textarea>
    <button type="submit" class="chat-input-submit" (click)="onSubmit()">
      {{buttonText}}
    </button>
  `,
                encapsulation: ViewEncapsulation.None,
                styles: [".chat-input-text{margin:14px 0 0 14px;height:25px;width:70%;border:0;resize:none;border:none;overflow:auto;outline:0;box-shadow:none;font-size:14px;background-color:inherit;color:inherit}.chat-input-text::-webkit-input-placeholder{color:inherit}.chat-input-text::-moz-placeholder{color:inherit}.chat-input-text::-ms-input-placeholder{color:inherit}.chat-input-submit{margin:14px 12px;float:right;background-color:inherit;color:inherit;font-size:24px;border:0;outline:0}"]
            }]
    }], function () { return []; }, { buttonText: [{
            type: Input
        }], focus: [{
            type: Input
        }], send: [{
            type: Output
        }], dismiss: [{
            type: Output
        }], message: [{
            type: ViewChild,
            args: ['message']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChatConfigComponent {
    constructor() {
        this.text = 'Select theme';
        this.themeChange = new EventEmitter();
        this.themes = ['blue', 'grey', 'red'];
    }
    /**
     * @param {?} theme
     * @return {?}
     */
    setTheme(theme) {
        this.theme = theme;
        this.themeChange.emit(this.theme);
    }
}
ChatConfigComponent.ɵfac = function ChatConfigComponent_Factory(t) { return new (t || ChatConfigComponent)(); };
ChatConfigComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChatConfigComponent, selectors: [["chat-config"]], inputs: { text: "text", theme: "theme" }, outputs: { themeChange: "themeChange" }, decls: 3, vars: 2, consts: [[1, "chat-config"], ["class", "btn", 3, "btn-active", "click", 4, "ngFor", "ngForOf"], [1, "btn", 3, "click"]], template: function ChatConfigComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵtemplate(2, ChatConfigComponent_button_2_Template, 2, 3, "button", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.text, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.themes);
    } }, directives: [ɵngcc1.NgForOf], styles: [".chat-config[_ngcontent-%COMP%] {\n      padding: 20px;\n    }\n    .btn[_ngcontent-%COMP%] {\n      padding: 5px;\n      margin: 0px 2px;\n      border: 1px solid #dedede;\n      outline: none;\n    }\n    .btn-active[_ngcontent-%COMP%] {\n      border: 1px solid #a0a0a0;\n    }\n    .btn[_ngcontent-%COMP%]:focus {\n      border: 1px solid #333;\n    }"] });
ChatConfigComponent.propDecorators = {
    theme: [{ type: Input }],
    text: [{ type: Input }],
    themeChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChatConfigComponent, [{
        type: Component,
        args: [{
                selector: 'chat-config',
                template: `
    <div class="chat-config">
      {{text}}
      <button *ngFor="let item of themes"
              class="btn" [class.btn-active]="item === theme"
              (click)="setTheme(item)">
        {{item}}
      </button>
    </div>
  `,
                styles: [`
    .chat-config {
      padding: 20px;
    }
    .btn {
      padding: 5px;
      margin: 0px 2px;
      border: 1px solid #dedede;
      outline: none;
    }
    .btn-active {
      border: 1px solid #a0a0a0;
    }
    .btn:focus {
      border: 1px solid #333;
    }
  `]
            }]
    }], function () { return []; }, { text: [{
            type: Input
        }], themeChange: [{
            type: Output
        }], theme: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChatbotRasaModule {
}
ChatbotRasaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ChatbotRasaModule });
ChatbotRasaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ChatbotRasaModule_Factory(t) { return new (t || ChatbotRasaModule)(); }, providers: [ChatService], imports: [[CommonModule, BrowserAnimationsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChatbotRasaModule, { declarations: function () { return [ChatAvatarComponent, ChatWidgetComponent, ChatInputComponent, ChatConfigComponent]; }, imports: function () { return [CommonModule, BrowserAnimationsModule]; }, exports: function () { return [ChatWidgetComponent, ChatConfigComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChatbotRasaModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, BrowserAnimationsModule],
                declarations: [ChatAvatarComponent, ChatWidgetComponent, ChatInputComponent, ChatConfigComponent],
                exports: [ChatWidgetComponent, ChatConfigComponent],
                entryComponents: [ChatWidgetComponent, ChatConfigComponent],
                providers: [ChatService]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ChatbotRasaModule, fadeIn as ɵd, fadeInOut as ɵc, ChatAvatarComponent as ɵa, ChatConfigComponent as ɵg, ChatInputComponent as ɵf, ChatWidgetComponent as ɵb, ChatService as ɵe };

//# sourceMappingURL=angular-chat-widget-rasa.js.map